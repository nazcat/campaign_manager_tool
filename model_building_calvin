import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import NearestNeighbors
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    classification_report, accuracy_score, confusion_matrix,
    mean_absolute_error, mean_squared_error, r2_score
)
import joblib

# Function to normalize genre columns
def normalize_genres(data, genre_columns):
    data['genre_sum'] = data[genre_columns].sum(axis=1)
    data[genre_columns] = data[genre_columns].div(data['genre_sum'], axis=0).fillna(0)
    data.drop(columns=['genre_sum'], inplace=True)
    return data

# Paths to data
individual_device_path = 'data/anon_processed_unique_device_v3.csv'
campaign_data_path = 'data/anan_campaign_modeling_data_v3.csv'

# Genre columns
GENRE_COLUMNS = [
    'Classics', 'Comedy', 'Other', 'Reality', 'News and Information',
    'Drama', 'Action & Adventure', 'Thriller', 'Sci-Fi & Fantasy', 'Horror', 'Western',
    'Documentaries', 'Sports', 'Instructional & Educational', 'Home & Lifestyle', 'Romance',
    'Anime', 'Musical', 'Independent', 'Entertainment', 'Paranormal', 'Music', 'Gay & Lesbian',
    'Crime', 'Food & Cooking', 'Faith & Spirituality', 'Game Show', 'Dance', 'Children & Family',
    'Telenovela', 'Talk Show', 'Variety Show', 'War', 'Young Adult', 'None'
]

# Load data
campaign_data = pd.read_csv(campaign_data_path)
campaign_data = normalize_genres(campaign_data, GENRE_COLUMNS)

# Nearest Neighbors Model
def train_nearest_neighbors(data, features, model_path, scaler_path):
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(data[features])

    nn_model = NearestNeighbors(n_neighbors=1, metric='euclidean')
    nn_model.fit(X_scaled)

    joblib.dump(nn_model, model_path)
    joblib.dump(scaler, scaler_path)
    print("Nearest Neighbors model and scaler saved successfully!")

train_nearest_neighbors(
    campaign_data, ['impressions', 'clicks'] + GENRE_COLUMNS,
    'models/nearest_neighbors_model.pkl', 'models/nearest_neighbors_scaler.pkl'
)

# Random Forest Classifier
def train_random_forest_classifier(data, features, target, model_path):
    X_train, X_test, y_train, y_test = train_test_split(
        data[features], data[target], test_size=0.2, random_state=42
    )

    rf_classifier = RandomForestClassifier(random_state=42, n_estimators=100)
    rf_classifier.fit(X_train, y_train)

    y_pred = rf_classifier.predict(X_test)
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

    joblib.dump(rf_classifier, model_path)
    print(f"Random Forest Classifier saved as '{model_path}'")

campaign_data['score_encoded'] = campaign_data['score'].map({
    'Poor': 0, 'Fair': 1, 'Good': 2, 'Excellent': 3
})
train_random_forest_classifier(
    campaign_data, ['impressions', 'clicks'] + GENRE_COLUMNS, 'score_encoded', 'models/rf_classifier.pkl'
)

# Random Forest Regressor
def train_random_forest_regressor(data, features, target, model_path):
    X_train, X_test, y_train, y_test = train_test_split(
        data[features], data[target], test_size=0.2, random_state=42
    )

    rf_regressor = RandomForestRegressor(random_state=42, n_estimators=100)
    rf_regressor.fit(X_train, y_train)

    y_pred = rf_regressor.predict(X_test)
    print("Regression Model Performance:")
    print(f"Mean Absolute Error (MAE): {mean_absolute_error(y_test, y_pred):.2f}")
    print(f"Mean Squared Error (MSE): {mean_squared_error(y_test, y_pred):.2f}")
    print(f"R^2 Score: {r2_score(y_test, y_pred):.2f}")

    joblib.dump(rf_regressor, model_path)
    print(f"Random Forest Regressor saved as '{model_path}'")

train_random_forest_regressor(
    campaign_data, ['impressions', 'clicks'] + GENRE_COLUMNS, 'avg_time_watched_per_device', 'models/regression_model.pkl'
)
